basePath: /
definitions:
  auth.TokenRequest:
    properties:
      token:
        type: string
    type: object
  controller.MessageResponse:
    properties:
      message:
        type: string
    type: object
  enum.ColorBlindnessEnum:
    enum:
    - normal
    - protanopia
    - deuteranopia
    - tritanopia
    type: string
    x-enum-varnames:
    - Normal
    - Protanopia
    - Deuteranopia
    - Tritanopia
  enum.GenderEnum:
    enum:
    - male
    - female
    - other
    type: string
    x-enum-varnames:
    - Male
    - Female
    - Other
  enum.ThemeEnum:
    enum:
    - light
    - dark
    - system
    type: string
    x-enum-varnames:
    - Light
    - Dark
    - System
  model.AddressRequest:
    properties:
      city:
        type: string
      complement:
        type: string
      country:
        type: string
      neighborhood:
        type: string
      number:
        type: string
      state:
        type: string
      street:
        type: string
      zip_code:
        type: string
    type: object
  model.AddressResponse:
    properties:
      city:
        type: string
      complement:
        type: string
      country:
        type: string
      id:
        type: integer
      neighborhood:
        type: string
      number:
        type: string
      state:
        type: string
      street:
        type: string
      zip_code:
        type: string
    type: object
  model.CompanyRequest:
    properties:
      address:
        $ref: '#/definitions/model.AddressRequest'
      cnpj:
        type: string
      name:
        type: string
      phone:
        type: string
      user:
        $ref: '#/definitions/model.UserRequest'
    type: object
  model.CompanyResponse:
    properties:
      address:
        $ref: '#/definitions/model.AddressResponse'
      cnpj:
        type: string
      id:
        type: integer
      name:
        type: string
      phone:
        type: string
      user:
        $ref: '#/definitions/model.UserResponse'
    type: object
  model.Config:
    properties:
      color_blindness:
        $ref: '#/definitions/enum.ColorBlindnessEnum'
      font_size:
        type: integer
      screen_reader:
        type: boolean
      system_colors:
        $ref: '#/definitions/model.SystemColors'
      theme:
        $ref: '#/definitions/enum.ThemeEnum'
      voice_capture:
        type: boolean
    type: object
  model.Credentials:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  model.DisabilityRequest:
    properties:
      acquired:
        type: boolean
      id:
        type: integer
    type: object
  model.Field:
    properties:
      name:
        type: string
      value:
        type: string
    type: object
  model.LoginResponse:
    properties:
      code:
        type: string
      message:
        type: string
      token:
        type: string
      user_info: {}
    type: object
  model.NewsResponse:
    properties:
      author:
        type: string
      author_image:
        type: string
      banner:
        type: string
      date:
        type: string
      description:
        type: string
      id:
        type: integer
      title:
        type: string
    type: object
  model.PersonDisabilityResponse:
    properties:
      acquired:
        type: boolean
      category:
        type: string
      description:
        type: string
      id:
        type: integer
      rate:
        type: string
    type: object
  model.PersonRequest:
    properties:
      address:
        $ref: '#/definitions/model.AddressRequest'
      cpf:
        type: string
      disabilities:
        items:
          $ref: '#/definitions/model.DisabilityRequest'
        type: array
      gender:
        $ref: '#/definitions/enum.GenderEnum'
      name:
        type: string
      phone:
        type: string
      user:
        $ref: '#/definitions/model.UserRequest'
    type: object
  model.PersonResponse:
    properties:
      address:
        $ref: '#/definitions/model.AddressResponse'
      cpf:
        type: string
      disabilities:
        items:
          $ref: '#/definitions/model.PersonDisabilityResponse'
        type: array
      gender:
        $ref: '#/definitions/enum.GenderEnum'
      id:
        type: integer
      name:
        type: string
      phone:
        type: string
      user:
        $ref: '#/definitions/model.UserResponse'
    type: object
  model.Response:
    properties:
      code:
        type: string
      data: {}
      fields:
        items:
          $ref: '#/definitions/model.Field'
        type: array
      message:
        type: string
    type: object
  model.SystemChartColors:
    additionalProperties:
      type: string
    type: object
  model.SystemColors:
    properties:
      chart_colors:
        $ref: '#/definitions/model.SystemChartColors'
      primary_colors:
        $ref: '#/definitions/model.SystemPrimaryColors'
    type: object
  model.SystemPrimaryColors:
    properties:
      background_color:
        type: string
      font_color:
        type: string
      input_color:
        type: string
      primary_color:
        type: string
      secondary_color:
        type: string
      secondary_font_color:
        type: string
    type: object
  model.UserRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  model.UserResponse:
    properties:
      config:
        $ref: '#/definitions/model.Config'
      email:
        type: string
      id:
        type: integer
    type: object
  utils.Error:
    properties:
      code:
        type: string
      fields:
        items:
          $ref: '#/definitions/model.Field'
        type: array
      message:
        type: string
    type: object
host: conexao-inclusao.com
info:
  contact:
    email: cauakathdev@gmail.com
    name: API Support
  description: This is the API for the CIJ project
  title: CIJ Project API
  version: "1.0"
paths:
  /companies:
    get:
      consumes:
      - application/json
      description: list all registered companies and their users.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.CompanyResponse'
            type: array
        "404":
          description: not found
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: List all registered companies.
      tags:
      - Companies
    post:
      consumes:
      - application/json
      description: create a new company and their user.
      parameters:
      - description: Company
        in: body
        name: company
        required: true
        schema:
          $ref: '#/definitions/model.CompanyRequest'
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            type: string
        "400":
          description: bad request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Create a new company.
      tags:
      - Companies
  /companies/:id:
    delete:
      consumes:
      - application/json
      description: delete an existent company and their user.
      parameters:
      - description: Company ID
        in: path
        name: id
        required: true
        type: string
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            type: string
        "400":
          description: bad request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Delete a company.
      tags:
      - Companies
    put:
      consumes:
      - application/json
      description: update an existent company and their user.
      parameters:
      - description: Company
        in: body
        name: company
        required: true
        schema:
          $ref: '#/definitions/model.CompanyRequest'
      - description: Company ID
        in: path
        name: id
        required: true
        type: string
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            type: string
        "400":
          description: bad request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Update a company.
      tags:
      - Companies
  /config/{email}:
    get:
      consumes:
      - application/json
      description: Get user config
      parameters:
      - description: User email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Config'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Get user config
      tags:
      - config
  /get-user-data:
    post:
      consumes:
      - application/json
      description: get user information by token.
      parameters:
      - description: Token
        in: body
        name: token
        required: true
        schema:
          $ref: '#/definitions/auth.TokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.LoginResponse'
        "400":
          description: bad request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Get user information.
      tags:
      - Auth
  /health:
    get:
      consumes:
      - '*/*'
      description: get the status of server.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Show the status of server.
      tags:
      - Root
  /login:
    post:
      consumes:
      - application/json
      description: do login and returns token.
      parameters:
      - description: Credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/model.Credentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.LoginResponse'
        "400":
          description: bad request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Do login.
      tags:
      - Auth
  /news:
    get:
      consumes:
      - application/json
      description: list all registered news.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.NewsResponse'
            type: array
        "404":
          description: not found
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: List all registered news.
      tags:
      - News
    post:
      consumes:
      - application/json
      description: create a new news.
      parameters:
      - in: formData
        name: author
        type: string
      - in: formData
        name: date
        type: string
      - in: formData
        name: description
        type: string
      - in: formData
        name: title
        type: string
      - description: banner
        in: formData
        name: banner
        required: true
        type: file
      - description: author_image
        in: formData
        name: authorImage
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Response'
        "400":
          description: bad request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Create a new news.
      tags:
      - News
  /people:
    get:
      consumes:
      - application/json
      description: list all registered people and their users.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.PersonResponse'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.MessageResponse'
      summary: List all registered people.
      tags:
      - People
    post:
      consumes:
      - application/json
      description: create a new person and their user.
      parameters:
      - description: Person
        in: body
        name: person
        required: true
        schema:
          $ref: '#/definitions/model.PersonRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.MessageResponse'
      summary: Create a new person.
      tags:
      - People
  /people/:id:
    delete:
      consumes:
      - application/json
      description: delete an existent person and their user.
      parameters:
      - description: Person ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.MessageResponse'
      summary: Delete a person.
      tags:
      - People
    get:
      consumes:
      - application/json
      description: get a person by their ID.
      parameters:
      - description: Person ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.PersonResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.MessageResponse'
      summary: Get a person by ID.
      tags:
      - People
    put:
      consumes:
      - application/json
      description: update an existent person and their user.
      parameters:
      - description: Person
        in: body
        name: person
        required: true
        schema:
          $ref: '#/definitions/model.PersonRequest'
      - description: Person ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.MessageResponse'
      summary: Update a person.
      tags:
      - People
  /people/:id/address:
    put:
      consumes:
      - application/json
      description: update an existent person address.
      parameters:
      - description: Address
        in: body
        name: address
        required: true
        schema:
          $ref: '#/definitions/model.AddressRequest'
      - description: Person ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.MessageResponse'
      summary: Update a person address.
      tags:
      - People
  /people/:id/disabilities:
    put:
      consumes:
      - application/json
      description: update an existent person disabilities.
      parameters:
      - description: Disabilities
        in: body
        name: disabilities
        required: true
        schema:
          items:
            $ref: '#/definitions/model.DisabilityRequest'
          type: array
      - description: Person ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.MessageResponse'
      summary: Update a person disabilities.
      tags:
      - People
swagger: "2.0"
